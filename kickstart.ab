import { input_prompt } from "std/env"
import { dir_create, dir_exists, file_exists, file_glob } from "std/fs"
import { file_download } from "std/http"
import { match_regex } from "std/text"

// Global config
const output_parent = "../akademika/elyse/kattis/"
const template_repo = "../akademika/elyse/kattis/"
const editor_command_symbol = "code" 

echo "*** Kattis kickstart ***"

if not dir_exists(output_parent) {
    echo "Unable to locate output directory. Expected to find {output_parent}"
    exit(1)

}

if not dir_exists(template_repo) {
    echo "Note: Did not locate solution template source. Expected {template_repo}"
}


fun download_samples(keyword: Text, folder: Text): Null {
    const file_name = "samples.zip"
    const url =  "https://open.kattis.com/problems/{keyword}/file/statement/{file_name}"
    echo "Downloading samples.."
    if file_download(url, "{folder}/{file_name}") {
        echo "Done.."
    }else {
        echo "Unable to downlaod samples :("
        exit(1)
    }

    echo "Unzipping.."
    // TODO: Use 'file_name' variable here?
    $unzip -d {folder} {folder}/*zip$ failed {
        echo "Unable to unzip, exiting :("
        exit(1)
    }
    echo "Done.."
}

fun make_problem_folder(keyword: Text): Text {
    const target = keyword
    if dir_exists(target) {
        echo "Folder already exists..."
    }else {
        dir_create(target)
    }
    return target
}

fun open_editor(command_symbol: Text, target_folder: Text): Null {
    echo "Opening editor."
    ${command_symbol} {target_folder}$ failed {
        echo "Unable to open editor :("
    }
}

fun offer_template(templates: [Text]): Text {
    echo "Your detected templates are {templates}"
    const selected_template = input_prompt("Which template? >")
    // linear search for any matchin templates. Assume empty input to mean no template.
    for index, file in templates {
        if match_regex(file, selected_template) {
            echo "OK, using template {file}"
            return file
        }
    }
    return ""
}

fun get_template_names(template_repo_path: Text): [Text] {
    // NOTE: Will also contain directories. We essentially just filter for files.
    let glob = file_glob("{template_repo_path}*") failed {
        echo "Failed to retrieve files."
    }
   let probable_templates = [Text]
   for index, file in glob {
    if file_exists(file) {
        probable_templates += [file]
    }
   }
    return probable_templates
}

fun initialize_problem(keyword: Text): Null {
    const problem_folder = make_problem_folder(keyword)
    download_samples(keyword, problem_folder)

    const templates = get_template_names(template_repo)
    const selected_template = offer_template(templates)
    if file_exists(selected_template) {
        $cp {selected_template} {problem_folder}$ failed {
            echo "Unable to copy template {selected_template} to target {problem_folder}."
        }
    }else {
        echo "Not using any template."
    }

    open_editor(editor_command_symbol, problem_folder)
}

const keyword = input_prompt("Problem code name: >")
//const keyword = "4thought"
echo "Ok, will initialize {keyword}."
initialize_problem(keyword)
